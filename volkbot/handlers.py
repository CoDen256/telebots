import telebot
import configparser
import random
from models import *

config = configparser.ConfigParser()
config.read("application.cfg", encoding="UTF-8")

triggers = config['BOT']['triggers'].split(",")
token = config['BOT']['token']
wolf_error = config['BOT']['error']
bot = telebot.TeleBot(token, threaded=False)
debug_id = 283382228


@bot.message_handler(commands=['start', 'help'])
def start(message):
    try:
        bot.send_message(
            message.chat.id,
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–≤–æ–ª–∫–æ–±–æ—Ç–∞*\n–≠—Ç–æ –±–∞–∑–æ–≤—ã–µ –∫–æ–º–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ª–∫–æ–º.",
            parse_mode='markdown'
        )

        bot.send_message(
            message.chat.id,
            text="/add {quote} - –î–æ–±–∞–≤–ª—è–µ—Ç —Ü–∏—Ç–∞—Ç—É –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞.\n" + \
                 "/remove {i} - –£–¥–∞–ª—è–µ—Ç —Ü–∏—Ç–∞—Ç—É –ø–æ –∏–Ω–¥–µ–∫—Å—É.(i=0 - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ü–∏—Ç–∞—Ç—ã)\n" + \
                 "/list - –í—Å–µ —Ü–∏—Ç–∞—Ç—ã –∏ –∏—Ö –∏–Ω–¥–µ–∫—Å—ã.\n"
        )
    except Exception as e:
        bot.send_message(message.chat.id, wolf_error)
        log(str(e))


@bot.message_handler(commands=['add'])
def add(message):
    try:
        separated = message.text.replace("@volk_ne_lev_bot", "").split("/add")
        if not separated[1] or separated[1].isspace():
            bot.send_message(message.chat.id,
                             "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è /add")
            return
        quote = Quote(value=separated[1].strip())
        quote.save()

        bot.send_message(message.chat.id, f"–í—ã—Ä–∞–∂–µ–Ω–∏–µ *{quote.value}* –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ª–µ–∫—Å–∏–∫–æ–Ω –≤–æ–ª–∫–∞",
                         parse_mode='markdown')
    except Exception as e:
        bot.send_message(message.chat.id, wolf_error)
        log(str(e))


@bot.message_handler(commands=['remove'])
def remove(message):
    try:
        separated = message.text.split("/remove")
        if not separated[1] or separated[1].isspace() or not separated[1].strip().isnumeric():
            bot.send_message(message.chat.id,
                             "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è /remove")
            return

        quotes = sorted(Quote.all(), key=lambda x: x.value)
        n = int(separated[1].strip()) - 1
        if not (-1 <= n < len(quotes)):
            bot.send_message(message.chat.id,
                             "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ü–∏—Ç–∞—Ç—ã.")
            return

        if n == -1:
            for quote in Quote.all():quote.delete()
            bot.send_message(message.chat.id, f"–í—Å–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤–æ–ª–∫–∞ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
            return

        quote = quotes[n]
        quote.delete()

        bot.send_message(message.chat.id, f"–í—ã—Ä–∞–∂–µ–Ω–∏–µ *{quote.value}* –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—ã—Ç–æ –≤–æ–ª–∫–æ–º.",
                         parse_mode='markdown')
    except Exception as e:
        bot.send_message(message.chat.id, wolf_error)
        log(str(e))


@bot.message_handler(commands=['list'])
def quotes_list(message):
    try:
        quotes = ""
        lists = sorted(Quote.all(), key=lambda x: x.value)
        if not lists:
            bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç –≤–æ–ª–∫–∞ –ø—É—Å—Ç. –í–æ–ª–∫ –º–æ–ª—á–∏—Ç, –∞ –∑–Ω–∞—á–∏—Ç –ø–µ—Ä–µ–±–∏–≤–∞—Ç—å –µ–≥–æ –Ω–µ —Å—Ç–æ–∏—Ç.")
            return

        for i, quote in enumerate(lists):
            quotes += f"{i + 1}. {quote.value}\n"
        bot.send_message(message.chat.id, text=quotes)
    except Exception as e:
        bot.send_message(message.chat.id, wolf_error)
        log(str(e))


""" ANALYSERS """


@bot.message_handler(content_types=["text"])
def text_analyser(message):
    try:
        for trigger in triggers:
            if trigger in message.text.lower():
                generate_quote(message)
                return
    except Exception as e:
        bot.send_message(message.chat.id, wolf_error)
        log(str(e))


@bot.message_handler(content_types=["sticker"])
def sticker_analyser(message):
    try:
        if message.sticker.set_name == 'strong_isnot_who' or message.sticker.emoji == 'üê∫':
            generate_quote(message)
    except Exception as e:
        bot.send_message(message.chat.id, wolf_error)
        log(str(e))


""" DEBUG """

def log(text):
    bot.send_message(debug_id, text=f"{text}")

def generate_quote(message):
    quotes = list(map(lambda x: x.value, Quote.all()))
    if quotes:
        bot.send_message(message.chat.id, random.choice(quotes))
    else:
        bot.send_message(message.chat.id, "–£ –≤–æ–ª–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é")

bot.polling()